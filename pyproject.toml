[tool.poetry]
name = "flashcards"
version = "0.1.0"
description = ""
authors = ["Piotr Bajsarowicz <piotr.bajsarowicz@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
Cython = "0.29.33"
buildozer = "*"
google-api-python-client = "*"
kivy = "2.3.0rc3"
kivy-ios = "*"
pydantic = {extras = ["dotenv"], version = "*"}
pydantic-settings = "*"

[tool.poetry.group.dev.dependencies]
bandit = {extras = ["toml"], version = "*"}
black = "*"
ipdb = "*"
isort = "*"
mypy = "*"
pre-commit = "*"
pytest = "*"
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
    "A",  # flake8-builtins
    "AIR",  # Airflow
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",  # pydocstyle
    "DJ",  # flake8-django
    "DTZ",  # flake8-datetimez
    "E",  # Pyflakes Error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "N",  # pep8-naming
    "NPY",  # NumPy-specific rules
    "PD",  # pandas-vet
    "PERF",  # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRIO",  # flake8-trio
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Pyflakes Warning
    "YTT",  # flake8-2020
]
ignore = [
    "ANN002",   # Missing type annotation for *args
    "ANN003",   # Missing type annotation for **kwargs
    "ANN101",   # Missing type annotation for self in method
    "ANN102",   # Missing type annotation for cls in classmethod
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
]

target-version = "py312"
line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true

[tool.black]
line-length = 120

[tool.mypy]
ignore_missing_imports = true
plugins = "pydantic.mypy"

[tool.isort]
profile = "black"
line_length = 120
force_single_line = true
